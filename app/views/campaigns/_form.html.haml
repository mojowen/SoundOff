= form_for @campaign do |f|

	= f.text_field :name, :placeholder => 'Name of Campaign*', :counter => 120
	.help Keep it short and snappy! This name will appear with your campaign.

	.count 120


	= f.text_field :hashtag, :placeholder => 'Campaign Hashtag*', :counter => 20
	.help Make it original! If it’s already been used for a SoundOff campaign, you’ll need to pick another or get permission.
	.count 20
	.extra #

	= f.text_area :description, :placeholder => 'Describe Your Campaign*', :counter => 250, :rows => 10
	.help{ :style => 'margin-top: -302px;' } This will appear on your campaign page for all to see. A few ground rules... SoundOff is meant for advocating policy positions, priorities and legislation. You can’t use it to sell a product, promote discrimination or violence, intimidate, defame, or advocate the overthrow of the U.S. government. More details can be found in the Partner Terms of Service
	.count 250

	- if current_user.admin || current_user.partner.partner_type == 'nonprofit'
		.email_options.radio
			%h2 Email Options

			.line
				= f.radio_button :email_option, 'optional', :checked => 'checked'
				%label Optional
			.help users are prompted for their email address - but it's optional

			.line
				= f.radio_button :email_option, 'required'
				%label Required
			.help users are required to enter their email address

			.line
				= f.radio_button :email_option, 'hidden'
				%label Hidden
			.help users are not prompted for their email address and emails are not saved

	.suggested.line
		%input{ :type => 'checkbox', :checked => @campaign.new_record? || @campaign.suggested.length > 1 }
		%label Include Suggested Tweets

		.suggested_tweets
			- 4.times do |index|
				- if index == 0
					- if @campaign.new_record? || @campaign.suggested[index]
						%input.no_hide{ :placeholder => 'Tweet Suggestion #1', :name => 'campaign[suggested][0]', :value => @campaign.suggested[index] || '' }
					- else
						%input.no_hide{ :placeholder => 'Tweet Suggestion #1', :name_off => 'campaign[suggested][0]', :style => 'display:none' }
				- else
					- if @campaign.suggested[index]
						%input.no_hide{ :placeholder => "Tweet Suggestion \##{index+1}", :name => "campaign[suggested][#{index}]", :value => @campaign.suggested[index] }
					- else
						%input.no_hide{ :placeholder => "Tweet Suggestion \##{index+1}", :name_off => "campaign[suggested][#{index}]", :style => 'display:none' }
	.help{ :style => 'margin-top: -140px'} Here’s where you can get creative. We suggest making each suggestion distinct from each other. Feel free to add additional hashtags or links. Keep in mind that the campaign hashtag will automatically appear at the end of all the tweets. Don’t write that hashtag into your suggested tweets, unless you want it to appear twice.

	.targets.radio.line
		%h2 Targets

		= f.radio_button :target, 'house', :checked => 'checked'
		%label US House of Representatives
		%br
		= f.radio_button :target, 'senate'
		%label US Senate

	.help Who do you want to target, one House Rep or two Senators?

	.notice
		Once you submit your campaign it will need to be approved by HeadCount - you'll get a notice when it's good to go.
	%button
		- if @campaign.new_record?
			Create

		- else
			Update

		&nbsp;
		%span #S
		ound
		%span O
		ff
:javascript
	$(document).ready( function() { $('.suggested_tweets input').change() })
	.on('click','.radio label',function() {
		this.previousElementSibling.click()
	})
	.on('keydown','textarea, input',function(){
		var $this = $(this),
			txt = $this.val()

		if( $this.is('#campaign_hashtag') ) {
			txt = txt.replace(/\s|\#/,'')
			$this.val(txt)
		}
		var count = parseInt($this.attr('counter')) - txt.length,
			oops = count < 0 ? 'oops' : ''

		$this.nextAll('.count:first').text( count ).removeClass('oops').addClass(oops)

	})
	.on('click','.suggested input[type=checkbox]',function() {
		var $this = $(this)

		if( $this.is(':checked') ) {
			var $next = $this.nextAll('.suggested_tweets').find('input:first')
			$next.show().change().attr('name', $next.attr('name_off') ).attr('name_off', null );
		} else $this.nextAll('.suggested_tweets').find('input').hide().each( function(){
			var $next = $(this)
			$next.attr('name_off', $next.attr('name') ).attr('name', null )
		})
	})
	.on('keydown change','.suggested_tweets input',function(e) {
		var $this = $(this),
			$next = $this.nextAll('input:first')
		if( $this.val().length > 0 || e.keyCode == 13 ) $next.show().change().attr('name', $next.attr('name_off') ).attr('name_off', null )
		else $this.nextAll('input:first').hide().attr('name_off', $next.attr('name') ).attr('name', null )
		if( e.keyCode == 13 ) e.preventDefault();
	})
	.on('focus','input, textarea',function() {
		if( ! $this.hasClass('no_hide') ) {
			$('.help').removeClass('on')
			$(this).next().addClass('on')
		}
	})
	.on('mouseover','.line',function(){
		$('.help').removeClass('on')
		$(this).next().addClass('on')
	})
	.on('blur','input',function(){
		var $this = $(this)
		if( $this.val().length > 0 ) $this.removeClass('oops')
	})
	.on('submit','form',function(e){
		var errors = []

		$('input:visible').removeClass('oops').not('[type=radio],[type=checkbox]').each( function() {
			var $input = $(this)
			if(
				($input.val().length < 1 && $input.attr('placeholder').search(/\*/) !== -1) ||
				$input.val().length > parseInt( $input.attr('counter') )
			) {
				errors.push( $input.addClass('oops') )
			}
		})

		if( errors.length ) e.preventDefault();
	})